---
- name: Manage a Berachain testnet node
  hosts: localhost
  become: true
  vars_prompt:
    - name: node_action
      prompt: "Enter the action to perform (install, remove)"
      private: false
  vars:
        working_directory: "{{ ansible_env.HOME }}/polaris"
        logs_directory: "{{ ansible_env.HOME }}/berachain"   

  tasks:
    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - git
          - make
          - jq
        state: present
      when: node_action == "install"

    - name: Create berachain log output
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/berachain"
        state: directory
        mode: '0755'
      when: node_action == "install"

    - name: Ensure the output.log file exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/berachain/output.log"
        state: touch
        mode: '0644'

    - name: Check for existing .tmp/polard folder
      ansible.builtin.stat:
        path: /root/polaris/.tmp/polard
      register: polard_folder
    
    - name: Remove existing .tmp/polard folder
      ansible.builtin.file:
        path: /root/polaris/.tmp/polard
        state: absent
      ignore_errors: true  
      when: polard_folder.stat.exists and node_action == "remove"    
  
    - name: Download and install GoLang
      block:
        - name: Download GoLang
          ansible.builtin.get_url:
            url: https://golang.org/dl/go1.21.4.linux-amd64.tar.gz
            dest: "/tmp/go1.21.4.linux-amd64.tar.gz"
        - name: Extract GoLang
          ansible.builtin.unarchive:
            src: "/tmp/go1.21.4.linux-amd64.tar.gz"
            dest: /usr/local
            remote_src: yes
      when: node_action == "install"

    - name: Set GoLang PATH environment variable globally
      ansible.builtin.lineinfile:
        path: /etc/profile.d/golang.sh
        line: 'export PATH=$PATH:/usr/local/go/bin'
        create: yes
      when: node_action == "install"

    - name: Verify Go installation
      ansible.builtin.command: /usr/local/go/bin/go version
      register: go_version
      ignore_errors: true
      when: node_action == "install" or node_action == "remove"
    
      

    - name: Fail if Go is not installed
      ansible.builtin.fail:
        msg: "Go is not installed correctly."
      when: go_version.rc != 0 and node_action == "install"

    - name: Create Go PATH script in /etc/profile.d/
      ansible.builtin.copy:
        dest: /etc/profile.d/go.sh
        content: |
          #!/bin/sh
          export PATH="$PATH:/usr/local/go/bin"
        mode: '0755'
      when: node_action == "install"

    - name: Ensure Go bin directory is in PATH for all shell types
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.profile"
        line: 'export PATH="$PATH:/usr/local/go/bin"'
        create: yes
      when: node_action == "install"
  
  
    - name: Install Foundry and update PATH
      block:
        - name: Install Foundry
          ansible.builtin.shell: |
            curl -L https://foundry.paradigm.xyz | bash
          args:
            executable: /bin/bash
          environment:
            PATH: "{{ ansible_env.PATH }}:/root/.foundry/bin"
        
        - name: Reload .bashrc to ensure PATH is updated
          ansible.builtin.shell: |
            source /root/.bashrc
          args:
            executable: /bin/bash

        - name: Verify forge installation
          ansible.builtin.shell: forge --version
          args:
            executable: /bin/bash
          register: forge_version
          failed_when: forge_version.rc != 0

        - name: Create symlink for forge in /usr/local/bin
          ansible.builtin.file:
            src: /root/.foundry/bin/forge
            dest: /usr/local/bin/forge
            state: link
          when: node_action == "install"
  

    - name: Update Foundry to the latest version
      ansible.builtin.shell: |
        foundryup
      args:
        executable: /bin/bash
      environment:
        PATH: "{{ ansible_env.PATH }}:/root/.foundry/bin"
      when: node_action == "install"
 
    - name: Clone Berachain Polaris repository
      ansible.builtin.git:
        repo: 'https://github.com/berachain/polaris'
        dest: "{{ ansible_env.HOME }}/polaris"
        version: main
        depth: 1
      when: node_action == "install"



    #- name: Build and start Berachain node and capture output
    #  when: node_action == "install"
    #  block:
    #    - name: Check for existing .tmp/polard folder
    #      ansible.builtin.stat:
    #       path: /root/polaris/.tmp/polard
    #      register: polard_folder
    #    - name: Remove existing .tmp/polard folder
    #      ansible.builtin.file:
    #        path: /root/polaris/.tmp/polard
    #        state: absent
    #      when: polard_folder.stat.exists
    #    - name: Start Berachain node and capture initial output
    #      ansible.builtin.shell: |
    #        #source /etc/profile
    #        cd {{ ansible_env.HOME }}/polaris
    #        source ~/.profile
    #        make start 
    #      args:
    #        executable: /bin/bash
    #      register: node_output
    #      environment:
    #       PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"
    #    - name: Save node wallet address and ID to a file
    #      ansible.builtin.copy:
    #        content: "{{ node_output.stdout }}"
    #        dest: "{{ ansible_env.HOME }}/berachain/node_info.txt"
    #        mode: "750"
    #      when: node_output.stdout is defined
    #    - name: Display path to wallet address and node ID file
    #      ansible.builtin.debug:
    #        msg: "Wallet address and node ID are stored in {{ ansible_env.HOME }}/berachain/node_info.txt"


    - name: Generate Berachain Node Service file from template
      ansible.builtin.template:
        src: berachain-node.service.j2
        dest: /etc/systemd/system/berachain-node.service
      become: yes

    
    - name: Create Berachain node service template
      ansible.builtin.template:
        src: berachain-node.service.j2
        dest: /etc/systemd/system/berachain-node.service
      when: node_action == "install"


    - name: Reload systemd manager configuration
      ansible.builtin.systemd:
        daemon_reload: true
      when: node_action == "install"
     

    - name: Enable and start Berachain node service
      ansible.builtin.systemd:
        name: berachain-node
        #state: started
        enabled: true
      when: node_action == "install"

    - name: Remove Berachain node
      when: node_action == "remove"
      block:
        - name: Stop and disable Berachain node service
          ansible.builtin.systemd:
            name: berachain-node
            state: stopped
            enabled: false
          ignore_errors: true
        - name: Remove Berachain files and configurations
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ ansible_env.HOME }}/polaris"
            - "/etc/systemd/system/berachain-node.service"
        - name: Reload systemd manager configuration
          ansible.builtin.systemd:
            daemon_reload: true
          when: node_action == "remove"    
